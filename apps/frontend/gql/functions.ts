import { gql, type GraphQLClient } from 'graphql-request'
import type * as Types from './graphql'


export function getContentById(client: GraphQLClient, variables: Types.getContentByIdQueryVariables) : Promise<Types.getContentByIdQuery>
{
  const query = gql`query getContentById($key: String!, $version: String, $locale: [Locales!], $path: String = "-", $domain: String, $changeset: String) { content: _Content( variation: {include: ALL} where: {_or: [{_metadata: {key: {eq: $key}, version: {eq: $version}}}, {_metadata: {url: {default: {eq: $path}, base: {eq: $domain}}, version: {eq: $version}}}], _metadata: {changeset: {eq: $changeset}}} locale: $locale ) { total items: item { ...IContentData ...SectionCompositionData ...ButtonBlockData ...ContentRecsElementData ...LayoutSettingsBlockData ...MegaMenuGroupBlockData ...OdpEmbedBlockData ...PageSeoSettingsData ...ParagraphElementData ...QuoteBlockData ...RichTextElementData ...TestimonialElementData ...TextBlockData ...VideoElementData ...LandingPageData ...BlogSectionExperienceData ...BlankExperienceData ...BlogPostPageData ...ArticleListElementData ...CTAElementData ...HeadingElementData ...ImageElementData ...ContinueReadingComponentData ...CarouselBlockData ...HeroBlockData ...MenuNavigationBlockData ...OptiFormsContainerDataData ...OptiFormsChoiceElementData ...OptiFormsNumberElementData ...OptiFormsRangeElementData ...OptiFormsSelectionElementData ...OptiFormsResetElementData ...OptiFormsSubmitElementData ...OptiFormsTextareaElementData ...OptiFormsTextboxElementData ...OptiFormsUrlElementData } } } fragment ButtonBlockData on ButtonBlock { children: ButtonText url: ButtonUrl { ...LinkData } className: ButtonClass buttonType: ButtonType buttonVariant: ButtonVariant } fragment ContentRecsElementData on ContentRecsElement { ElementDeliveryApiKey ElementRecommendationCount } fragment LayoutSettingsBlockData on LayoutSettingsBlock { mainMenu { ...ImageMediaComponentData ...VideoMediaComponentData } contactInfoHeading serviceButtons { ...ImageMediaComponentData ...VideoMediaComponentData } contactInfo { json html } footerMenus { ...ImageMediaComponentData ...VideoMediaComponentData } copyright legalLinks { ...LinkItemData } appIdentifiers } fragment MegaMenuGroupBlockData on MegaMenuGroupBlock { _metadata { displayName } MenuMenuHeading MegaMenuUrl { ...LinkData } MegaMenuContentArea { ...IContentData ...MenuNavigationBlockData ...BlogPostPageMenuBlock } } fragment OdpEmbedBlockData on OdpEmbedBlock { ContentId } fragment PageSeoSettingsData on PageSeoSettings { MetaTitle MetaDescription MetaKeywords SharingImage { ...ReferenceData } GraphType } fragment ParagraphElementData on ParagraphElement { text { json } } fragment QuoteBlockData on QuoteBlock { quote: QuoteText color: QuoteColor active: QuoteActive name: QuoteProfileName profilePicture: QuoteProfilePicture { ...ReferenceData } location: QuoteProfileLocation } fragment RichTextElementData on RichTextElement { text { json html } } fragment TestimonialElementData on TestimonialElement { customerName customerLocation customerImage { ...ReferenceData } referenceTitle referenceText { json } } fragment TextBlockData on TextBlock { overline: TextBlockOverline headingSize: TextBlockHeadingSize heading: TextBlockHeading description: TextBlockDescription { json html } center: TextCenter width: TextBlockWidth className: TextClassName } fragment VideoElementData on VideoElement { title video { ...ReferenceData } placeholder { ...ReferenceData } } fragment LandingPageData on LandingPage { TopContentArea { ...ButtonBlockData ...ContentRecsElementData ...LayoutSettingsBlockData ...MegaMenuGroupBlockData ...OdpEmbedBlockData ...PageSeoSettingsData ...ParagraphElementData ...QuoteBlockData ...RichTextElementData ...TestimonialElementData ...TextBlockData ...VideoElementData } MainContentArea { ...ButtonBlockData ...ContentRecsElementData ...LayoutSettingsBlockData ...MegaMenuGroupBlockData ...OdpEmbedBlockData ...PageSeoSettingsData ...ParagraphElementData ...QuoteBlockData ...RichTextElementData ...TestimonialElementData ...TextBlockData ...VideoElementData } } fragment IContentData on _IContent { _metadata { key locale types displayName version changeset variation url { type base default } } _type: __typename } fragment SectionCompositionData on _ISection { composition { ...CompositionNodeData nodes { ...CompositionNodeData ... on CompositionStructureNode { nodes { ...CompositionNodeData ... on CompositionStructureNode { nodes { ...CompositionNodeData ... on CompositionComponentNode { component { ...IContentData ...ButtonBlockData ...ContentRecsElementData ...LayoutSettingsBlockData ...MegaMenuGroupBlockData ...OdpEmbedBlockData ...PageSeoSettingsData ...ParagraphElementData ...QuoteBlockData ...RichTextElementData ...TestimonialElementData ...TextBlockData ...VideoElementData ...ArticleListElementData ...CTAElementData ...HeadingElementData ...ImageElementData } } ... on CompositionStructureNode { nodes { ...CompositionNodeData ... on CompositionComponentNode { component { ...IContentData ...OptiFormsChoiceElementData ...OptiFormsNumberElementData ...OptiFormsRangeElementData ...OptiFormsSelectionElementData ...OptiFormsResetElementData ...OptiFormsSubmitElementData ...OptiFormsTextareaElementData ...OptiFormsTextboxElementData ...OptiFormsUrlElementData } } } } } } } } } } } fragment BlogSectionExperienceData on BlogSectionExperience { seo_data { ...PageSeoSettingsPropertyData } ...ExperienceData } fragment BlankExperienceData on BlankExperience { BlankExperienceSeoSettings { ...PageSeoSettingsPropertyData } ...ExperienceData } fragment ArticleListElementData on ArticleListElement { articleListCount topics } fragment CTAElementData on CTAElement { Text Link { type base default } } fragment HeadingElementData on HeadingElement { headingText } fragment ImageElementData on ImageElement { altText imageLink { key url { type base default } item { __typename ...CmpImageAssetInfo ...CmpVideoAssetInfo } } } fragment ContinueReadingComponentData on ContinueReadingComponent { topline shared heading content { ...IContentData ...ButtonBlockData ...ContentRecsElementData ...LayoutSettingsBlockData ...MegaMenuGroupBlockData ...OdpEmbedBlockData ...PageSeoSettingsData ...ParagraphElementData ...QuoteBlockData ...RichTextElementData ...TestimonialElementData ...TextBlockData ...VideoElementData ...ArticleListElementData ...CTAElementData ...HeadingElementData ...ImageElementData ...ContinueReadingComponentData ...CarouselBlockData ...HeroBlockData ...MenuNavigationBlockData } } fragment OptiFormsChoiceElementData on OptiFormsChoiceElement { Label Tooltip Options AllowMultiSelect Validators } fragment OptiFormsContainerDataData on OptiFormsContainerData { Title Description ShowSummaryMessageAfterSubmission SubmitConfirmationMessage ResetConfirmationMessage SubmitUrl { type base default } } fragment OptiFormsNumberElementData on OptiFormsNumberElement { Label Placeholder Tooltip PredefinedValue Validators AutoComplete } fragment OptiFormsRangeElementData on OptiFormsRangeElement { Label Tooltip PredefinedValue Min Max Increment } fragment OptiFormsSelectionElementData on OptiFormsSelectionElement { Label Placeholder Tooltip Options AllowMultiSelect Validators AutoComplete } fragment OptiFormsResetElementData on OptiFormsResetElement { Label Tooltip } fragment OptiFormsSubmitElementData on OptiFormsSubmitElement { Label Tooltip } fragment OptiFormsTextareaElementData on OptiFormsTextareaElement { Label Placeholder Tooltip PredefinedValue Validators AutoComplete } fragment OptiFormsTextboxElementData on OptiFormsTextboxElement { Label Placeholder Tooltip PredefinedValue Validators AutoComplete } fragment OptiFormsUrlElementData on OptiFormsUrlElement { Label Placeholder Tooltip PredefinedValue Validators } fragment CarouselBlockData on CarouselBlock { CarouselItemsContentArea { ...IContentData ...HeroBlockData ...QuoteBlockData } } fragment HeroBlockData on HeroBlock { HeroImage { key url { type base default } item { __typename ...CmpImageAssetInfo ...CmpVideoAssetInfo } } Icon Eyebrow Heading SubHeading DescriptionRichText: Description { json } HeroColor HeroButton { ...ButtonBlockPropertyData } } fragment MenuNavigationBlockData on MenuNavigationBlock { MenuNavigationHeading NavigationLinks { title text target url { type base default } } } fragment BlogPostPageData on BlogPostPage { Heading ArticleSubHeading Topic BlogPostBody { json } ArticleAuthor BlogPostPromoImage { key url { type base default } item { __typename ...CmpImageAssetInfo ...CmpVideoAssetInfo } } continueReading { ...IContentData ...ArticleListElementData ...CTAElementData ...HeadingElementData ...ImageElementData ...ContinueReadingComponentData ...CarouselBlockData ...HeroBlockData ...MenuNavigationBlockData } SeoSettings { ...PageSeoSettingsPropertyData } } fragment LinkData on ContentUrl { type base default } fragment ImageMediaComponentData on ImageMedia { alt: AltText meta: _metadata { url { default } name: displayName } } fragment VideoMediaComponentData on VideoMedia { meta: _metadata { url { default } name: displayName } } fragment LinkItemData on Link { title text target url { type base default } } fragment BlogPostPageMenuBlock on BlogPostPage { meta: _metadata { published url { ...LinkData } } topics: Topic heading: Heading author: ArticleAuthor image: BlogPostPromoImage { ...ReferenceData } sharing: SeoSettings { description: MetaDescription image: SharingImage { ...ReferenceData } } } fragment ReferenceData on ContentReference { key url { type base default } } fragment CompositionNodeData on ICompositionNode { name: displayName layoutType: nodeType type key template: displayTemplateKey settings: displaySettings { key value } } fragment PageSeoSettingsPropertyData on PageSeoSettingsProperty { MetaTitle MetaDescription MetaKeywords SharingImage { ...ReferenceData } GraphType } fragment ExperienceData on _IExperience { composition { ...CompositionNodeData nodes { ...CompositionNodeData ... on CompositionComponentNode { component { ...IContentData ...CarouselBlockData ...HeroBlockData } } ... on CompositionStructureNode { nodes { ...CompositionNodeData ... on CompositionStructureNode { nodes { ...CompositionNodeData ... on CompositionStructureNode { nodes { ...CompositionNodeData ... on CompositionComponentNode { component { ...IContentData ...ButtonBlockData ...ContentRecsElementData ...LayoutSettingsBlockData ...MegaMenuGroupBlockData ...OdpEmbedBlockData ...PageSeoSettingsData ...ParagraphElementData ...QuoteBlockData ...RichTextElementData ...TestimonialElementData ...TextBlockData ...VideoElementData ...ArticleListElementData ...CTAElementData ...HeadingElementData ...ImageElementData } } ... on CompositionStructureNode { nodes { ...CompositionNodeData ... on CompositionComponentNode { component { ...IContentData ...OptiFormsChoiceElementData ...OptiFormsNumberElementData ...OptiFormsRangeElementData ...OptiFormsSelectionElementData ...OptiFormsResetElementData ...OptiFormsSubmitElementData ...OptiFormsTextareaElementData ...OptiFormsTextboxElementData ...OptiFormsUrlElementData } } } } } } } } } component { ...IContentData ...OptiFormsContainerDataData } } } } } fragment CmpImageAssetInfo on cmp_PublicImageAsset { __typename Title AltText Width Height Url Renditions { Name Width Height Url } } fragment CmpVideoAssetInfo on cmp_PublicVideoAsset { Title AltText Url Renditions { Name Width Height Url } } fragment ButtonBlockPropertyData on ButtonBlockProperty { children: ButtonText url: ButtonUrl { ...LinkData } className: ButtonClass buttonType: ButtonType buttonVariant: ButtonVariant }`
  return client.request<Types.getContentByIdQuery, Types.getContentByIdQueryVariables>(query, variables)
}
export function getBlankExperienceData(client: GraphQLClient, variables: Types.getBlankExperienceDataQueryVariables) : Promise<Types.getBlankExperienceDataQuery>
{
  const query = gql`query getBlankExperienceData($key: [String!]!, $locale: [Locales], $changeset: String, $variation: VariationInput, $version: String) { data: BlankExperience( ids: $key locale: $locale variation: $variation where: {_metadata: {changeset: {eq: $changeset}, version: {eq: $version}}} ) { total item { _metadata { key version locale changeset variation } ...ExperienceData BlankExperienceSeoSettings { ...PageSeoSettingsPropertyData } } } } fragment PageSeoSettingsPropertyData on PageSeoSettingsProperty { MetaTitle MetaDescription MetaKeywords SharingImage { ...ReferenceData } GraphType } fragment ExperienceData on _IExperience { composition { ...CompositionNodeData nodes { ...CompositionNodeData ... on CompositionComponentNode { component { ...IContentData ...CarouselBlockData ...HeroBlockData } } ... on CompositionStructureNode { nodes { ...CompositionNodeData ... on CompositionStructureNode { nodes { ...CompositionNodeData ... on CompositionStructureNode { nodes { ...CompositionNodeData ... on CompositionComponentNode { component { ...IContentData ...ButtonBlockData ...ContentRecsElementData ...LayoutSettingsBlockData ...MegaMenuGroupBlockData ...OdpEmbedBlockData ...PageSeoSettingsData ...ParagraphElementData ...QuoteBlockData ...RichTextElementData ...TestimonialElementData ...TextBlockData ...VideoElementData ...ArticleListElementData ...CTAElementData ...HeadingElementData ...ImageElementData } } ... on CompositionStructureNode { nodes { ...CompositionNodeData ... on CompositionComponentNode { component { ...IContentData ...OptiFormsChoiceElementData ...OptiFormsNumberElementData ...OptiFormsRangeElementData ...OptiFormsSelectionElementData ...OptiFormsResetElementData ...OptiFormsSubmitElementData ...OptiFormsTextareaElementData ...OptiFormsTextboxElementData ...OptiFormsUrlElementData } } } } } } } } } component { ...IContentData ...OptiFormsContainerDataData } } } } } fragment ReferenceData on ContentReference { key url { type base default } } fragment ButtonBlockData on ButtonBlock { children: ButtonText url: ButtonUrl { ...LinkData } className: ButtonClass buttonType: ButtonType buttonVariant: ButtonVariant } fragment ContentRecsElementData on ContentRecsElement { ElementDeliveryApiKey ElementRecommendationCount } fragment LayoutSettingsBlockData on LayoutSettingsBlock { mainMenu { ...ImageMediaComponentData ...VideoMediaComponentData } contactInfoHeading serviceButtons { ...ImageMediaComponentData ...VideoMediaComponentData } contactInfo { json html } footerMenus { ...ImageMediaComponentData ...VideoMediaComponentData } copyright legalLinks { ...LinkItemData } appIdentifiers } fragment MegaMenuGroupBlockData on MegaMenuGroupBlock { _metadata { displayName } MenuMenuHeading MegaMenuUrl { ...LinkData } MegaMenuContentArea { ...IContentData ...MenuNavigationBlockData ...BlogPostPageMenuBlock } } fragment OdpEmbedBlockData on OdpEmbedBlock { ContentId } fragment PageSeoSettingsData on PageSeoSettings { MetaTitle MetaDescription MetaKeywords SharingImage { ...ReferenceData } GraphType } fragment ParagraphElementData on ParagraphElement { text { json } } fragment QuoteBlockData on QuoteBlock { quote: QuoteText color: QuoteColor active: QuoteActive name: QuoteProfileName profilePicture: QuoteProfilePicture { ...ReferenceData } location: QuoteProfileLocation } fragment RichTextElementData on RichTextElement { text { json html } } fragment TestimonialElementData on TestimonialElement { customerName customerLocation customerImage { ...ReferenceData } referenceTitle referenceText { json } } fragment TextBlockData on TextBlock { overline: TextBlockOverline headingSize: TextBlockHeadingSize heading: TextBlockHeading description: TextBlockDescription { json html } center: TextCenter width: TextBlockWidth className: TextClassName } fragment VideoElementData on VideoElement { title video { ...ReferenceData } placeholder { ...ReferenceData } } fragment IContentData on _IContent { _metadata { key locale types displayName version changeset variation url { type base default } } _type: __typename } fragment CompositionNodeData on ICompositionNode { name: displayName layoutType: nodeType type key template: displayTemplateKey settings: displaySettings { key value } } fragment ArticleListElementData on ArticleListElement { articleListCount topics } fragment CTAElementData on CTAElement { Text Link { type base default } } fragment HeadingElementData on HeadingElement { headingText } fragment ImageElementData on ImageElement { altText imageLink { key url { type base default } item { __typename ...CmpImageAssetInfo ...CmpVideoAssetInfo } } } fragment OptiFormsChoiceElementData on OptiFormsChoiceElement { Label Tooltip Options AllowMultiSelect Validators } fragment OptiFormsContainerDataData on OptiFormsContainerData { Title Description ShowSummaryMessageAfterSubmission SubmitConfirmationMessage ResetConfirmationMessage SubmitUrl { type base default } } fragment OptiFormsNumberElementData on OptiFormsNumberElement { Label Placeholder Tooltip PredefinedValue Validators AutoComplete } fragment OptiFormsRangeElementData on OptiFormsRangeElement { Label Tooltip PredefinedValue Min Max Increment } fragment OptiFormsSelectionElementData on OptiFormsSelectionElement { Label Placeholder Tooltip Options AllowMultiSelect Validators AutoComplete } fragment OptiFormsResetElementData on OptiFormsResetElement { Label Tooltip } fragment OptiFormsSubmitElementData on OptiFormsSubmitElement { Label Tooltip } fragment OptiFormsTextareaElementData on OptiFormsTextareaElement { Label Placeholder Tooltip PredefinedValue Validators AutoComplete } fragment OptiFormsTextboxElementData on OptiFormsTextboxElement { Label Placeholder Tooltip PredefinedValue Validators AutoComplete } fragment OptiFormsUrlElementData on OptiFormsUrlElement { Label Placeholder Tooltip PredefinedValue Validators } fragment CarouselBlockData on CarouselBlock { CarouselItemsContentArea { ...IContentData ...HeroBlockData ...QuoteBlockData } } fragment HeroBlockData on HeroBlock { HeroImage { key url { type base default } item { __typename ...CmpImageAssetInfo ...CmpVideoAssetInfo } } Icon Eyebrow Heading SubHeading DescriptionRichText: Description { json } HeroColor HeroButton { ...ButtonBlockPropertyData } } fragment LinkData on ContentUrl { type base default } fragment ImageMediaComponentData on ImageMedia { alt: AltText meta: _metadata { url { default } name: displayName } } fragment VideoMediaComponentData on VideoMedia { meta: _metadata { url { default } name: displayName } } fragment LinkItemData on Link { title text target url { type base default } } fragment BlogPostPageMenuBlock on BlogPostPage { meta: _metadata { published url { ...LinkData } } topics: Topic heading: Heading author: ArticleAuthor image: BlogPostPromoImage { ...ReferenceData } sharing: SeoSettings { description: MetaDescription image: SharingImage { ...ReferenceData } } } fragment MenuNavigationBlockData on MenuNavigationBlock { MenuNavigationHeading NavigationLinks { title text target url { type base default } } } fragment CmpImageAssetInfo on cmp_PublicImageAsset { __typename Title AltText Width Height Url Renditions { Name Width Height Url } } fragment CmpVideoAssetInfo on cmp_PublicVideoAsset { Title AltText Url Renditions { Name Width Height Url } } fragment ButtonBlockPropertyData on ButtonBlockProperty { children: ButtonText url: ButtonUrl { ...LinkData } className: ButtonClass buttonType: ButtonType buttonVariant: ButtonVariant }`
  return client.request<Types.getBlankExperienceDataQuery, Types.getBlankExperienceDataQueryVariables>(query, variables)
}
export function getBlogSectionExperienceData(client: GraphQLClient, variables: Types.getBlogSectionExperienceDataQueryVariables) : Promise<Types.getBlogSectionExperienceDataQuery>
{
  const query = gql`query getBlogSectionExperienceData($key: [String!]!, $locale: [Locales], $changeset: String, $variation: VariationInput, $version: String) { data: BlogSectionExperience( ids: $key locale: $locale variation: $variation where: {_metadata: {changeset: {eq: $changeset}, version: {eq: $version}}} ) { total item { _metadata { key version locale changeset variation } ...ExperienceData seo_data { ...PageSeoSettingsPropertyData } } } } fragment PageSeoSettingsPropertyData on PageSeoSettingsProperty { MetaTitle MetaDescription MetaKeywords SharingImage { ...ReferenceData } GraphType } fragment ExperienceData on _IExperience { composition { ...CompositionNodeData nodes { ...CompositionNodeData ... on CompositionComponentNode { component { ...IContentData ...CarouselBlockData ...HeroBlockData } } ... on CompositionStructureNode { nodes { ...CompositionNodeData ... on CompositionStructureNode { nodes { ...CompositionNodeData ... on CompositionStructureNode { nodes { ...CompositionNodeData ... on CompositionComponentNode { component { ...IContentData ...ButtonBlockData ...ContentRecsElementData ...LayoutSettingsBlockData ...MegaMenuGroupBlockData ...OdpEmbedBlockData ...PageSeoSettingsData ...ParagraphElementData ...QuoteBlockData ...RichTextElementData ...TestimonialElementData ...TextBlockData ...VideoElementData ...ArticleListElementData ...CTAElementData ...HeadingElementData ...ImageElementData } } ... on CompositionStructureNode { nodes { ...CompositionNodeData ... on CompositionComponentNode { component { ...IContentData ...OptiFormsChoiceElementData ...OptiFormsNumberElementData ...OptiFormsRangeElementData ...OptiFormsSelectionElementData ...OptiFormsResetElementData ...OptiFormsSubmitElementData ...OptiFormsTextareaElementData ...OptiFormsTextboxElementData ...OptiFormsUrlElementData } } } } } } } } } component { ...IContentData ...OptiFormsContainerDataData } } } } } fragment ReferenceData on ContentReference { key url { type base default } } fragment ButtonBlockData on ButtonBlock { children: ButtonText url: ButtonUrl { ...LinkData } className: ButtonClass buttonType: ButtonType buttonVariant: ButtonVariant } fragment ContentRecsElementData on ContentRecsElement { ElementDeliveryApiKey ElementRecommendationCount } fragment LayoutSettingsBlockData on LayoutSettingsBlock { mainMenu { ...ImageMediaComponentData ...VideoMediaComponentData } contactInfoHeading serviceButtons { ...ImageMediaComponentData ...VideoMediaComponentData } contactInfo { json html } footerMenus { ...ImageMediaComponentData ...VideoMediaComponentData } copyright legalLinks { ...LinkItemData } appIdentifiers } fragment MegaMenuGroupBlockData on MegaMenuGroupBlock { _metadata { displayName } MenuMenuHeading MegaMenuUrl { ...LinkData } MegaMenuContentArea { ...IContentData ...MenuNavigationBlockData ...BlogPostPageMenuBlock } } fragment OdpEmbedBlockData on OdpEmbedBlock { ContentId } fragment PageSeoSettingsData on PageSeoSettings { MetaTitle MetaDescription MetaKeywords SharingImage { ...ReferenceData } GraphType } fragment ParagraphElementData on ParagraphElement { text { json } } fragment QuoteBlockData on QuoteBlock { quote: QuoteText color: QuoteColor active: QuoteActive name: QuoteProfileName profilePicture: QuoteProfilePicture { ...ReferenceData } location: QuoteProfileLocation } fragment RichTextElementData on RichTextElement { text { json html } } fragment TestimonialElementData on TestimonialElement { customerName customerLocation customerImage { ...ReferenceData } referenceTitle referenceText { json } } fragment TextBlockData on TextBlock { overline: TextBlockOverline headingSize: TextBlockHeadingSize heading: TextBlockHeading description: TextBlockDescription { json html } center: TextCenter width: TextBlockWidth className: TextClassName } fragment VideoElementData on VideoElement { title video { ...ReferenceData } placeholder { ...ReferenceData } } fragment IContentData on _IContent { _metadata { key locale types displayName version changeset variation url { type base default } } _type: __typename } fragment CompositionNodeData on ICompositionNode { name: displayName layoutType: nodeType type key template: displayTemplateKey settings: displaySettings { key value } } fragment ArticleListElementData on ArticleListElement { articleListCount topics } fragment CTAElementData on CTAElement { Text Link { type base default } } fragment HeadingElementData on HeadingElement { headingText } fragment ImageElementData on ImageElement { altText imageLink { key url { type base default } item { __typename ...CmpImageAssetInfo ...CmpVideoAssetInfo } } } fragment OptiFormsChoiceElementData on OptiFormsChoiceElement { Label Tooltip Options AllowMultiSelect Validators } fragment OptiFormsContainerDataData on OptiFormsContainerData { Title Description ShowSummaryMessageAfterSubmission SubmitConfirmationMessage ResetConfirmationMessage SubmitUrl { type base default } } fragment OptiFormsNumberElementData on OptiFormsNumberElement { Label Placeholder Tooltip PredefinedValue Validators AutoComplete } fragment OptiFormsRangeElementData on OptiFormsRangeElement { Label Tooltip PredefinedValue Min Max Increment } fragment OptiFormsSelectionElementData on OptiFormsSelectionElement { Label Placeholder Tooltip Options AllowMultiSelect Validators AutoComplete } fragment OptiFormsResetElementData on OptiFormsResetElement { Label Tooltip } fragment OptiFormsSubmitElementData on OptiFormsSubmitElement { Label Tooltip } fragment OptiFormsTextareaElementData on OptiFormsTextareaElement { Label Placeholder Tooltip PredefinedValue Validators AutoComplete } fragment OptiFormsTextboxElementData on OptiFormsTextboxElement { Label Placeholder Tooltip PredefinedValue Validators AutoComplete } fragment OptiFormsUrlElementData on OptiFormsUrlElement { Label Placeholder Tooltip PredefinedValue Validators } fragment CarouselBlockData on CarouselBlock { CarouselItemsContentArea { ...IContentData ...HeroBlockData ...QuoteBlockData } } fragment HeroBlockData on HeroBlock { HeroImage { key url { type base default } item { __typename ...CmpImageAssetInfo ...CmpVideoAssetInfo } } Icon Eyebrow Heading SubHeading DescriptionRichText: Description { json } HeroColor HeroButton { ...ButtonBlockPropertyData } } fragment LinkData on ContentUrl { type base default } fragment ImageMediaComponentData on ImageMedia { alt: AltText meta: _metadata { url { default } name: displayName } } fragment VideoMediaComponentData on VideoMedia { meta: _metadata { url { default } name: displayName } } fragment LinkItemData on Link { title text target url { type base default } } fragment BlogPostPageMenuBlock on BlogPostPage { meta: _metadata { published url { ...LinkData } } topics: Topic heading: Heading author: ArticleAuthor image: BlogPostPromoImage { ...ReferenceData } sharing: SeoSettings { description: MetaDescription image: SharingImage { ...ReferenceData } } } fragment MenuNavigationBlockData on MenuNavigationBlock { MenuNavigationHeading NavigationLinks { title text target url { type base default } } } fragment CmpImageAssetInfo on cmp_PublicImageAsset { __typename Title AltText Width Height Url Renditions { Name Width Height Url } } fragment CmpVideoAssetInfo on cmp_PublicVideoAsset { Title AltText Url Renditions { Name Width Height Url } } fragment ButtonBlockPropertyData on ButtonBlockProperty { children: ButtonText url: ButtonUrl { ...LinkData } className: ButtonClass buttonType: ButtonType buttonVariant: ButtonVariant }`
  return client.request<Types.getBlogSectionExperienceDataQuery, Types.getBlogSectionExperienceDataQueryVariables>(query, variables)
}

